searchState.loadedDescShard("cli", 0, "Captures the state of the repl, gathers commands and …\nServer address to connect\nServer address to connect\nThe basic authentication for connecting to the server\nThe basic authentication for connecting to the server\nClient for interacting with GreptimeDB\nThe name of the catalog to export.\nThe name of the catalog to import.\nA half-open time range: [start_time, end_time). The end of …\nParallelism of the export.\nReturns the argument unchanged.\nParallelism of the import.\nDirectory of the data. E.g.: /tmp/greptimedb-backup\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nDisable proxy server, if set, will not use any proxy.\nDirectory to put the exported data. E.g.: …\nCurrent prompt\nThe proxy server address to connect, if set, will override …\nThe proxy server address to connect, if set, will override …\nRustyline editor for interacting with user on command line\nA half-open time range: [start_time, end_time). The start …\nThings to export\nThings to export\nThe timeout of invoking the database.\nThe timeout of invoking the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the parsed command from the user (which may be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSplit at <code>-</code>.\nExecute sql query.\nSNAFU context selector for the <code>Error::BuildCacheRegistry</code> …\nSNAFU context selector for the <code>Error::BuildClient</code> variant\nSNAFU context selector for the <code>Error::BuildRuntime</code> variant\nSNAFU context selector for the <code>Error::CacheRequired</code> variant\nSNAFU context selector for the <code>Error::CollectRecordBatches</code> …\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::EmptyResult</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FileIo</code> variant\nSNAFU context selector for the <code>Error::HttpQuerySql</code> variant\nSNAFU context selector for the <code>Error::IllegalConfig</code> variant\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InitTimezone</code> variant\nSNAFU context selector for the <code>Error::InitTlsProvider</code> …\nSNAFU context selector for the <code>Error::InvalidReplCommand</code> …\nSNAFU context selector for the <code>Error::LoadLayeredConfig</code> …\nSNAFU context selector for the <code>Error::MetaClientInit</code> …\nSNAFU context selector for the <code>Error::MissingConfig</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::ParseProxyOpts</code> …\nSNAFU context selector for the <code>Error::ParseSql</code> variant\nSNAFU context selector for the <code>Error::PlanStatement</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Readline</code> variant\nSNAFU context selector for the <code>Error::ReplCreation</code> variant\nSNAFU context selector for the <code>Error::RequestDatabase</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SpawnThread</code> variant\nSNAFU context selector for the <code>Error::StartMetaClient</code> …\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nExport all table schemas and data at once.\nExport all table data, corresponding to <code>COPY DATABASE TO</code>.\nExport all table schemas, corresponding to …\nServer address to connect\nIterate over all db names.\nThe basic authentication for connecting to the server\nThe name of the catalog to export.\nA half-open time range: [start_time, end_time). The end of …\nParallelism of the export.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of <code>TableReference</code> to be exported. Includes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nDirectory to put the exported data. E.g.: …\nThe proxy server address to connect, if set, will override …\nA half-open time range: [start_time, end_time). The start …\nThings to export\nThe timeout of invoking the database.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExport all table schemas and data at once.\nImport all table data into the database.\nImport all table schemas into the database.\nServer address to connect\nThe basic authentication for connecting to the server\nThe name of the catalog to import.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParallelism of the import.\nDirectory of the data. E.g.: /tmp/greptimedb-backup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nThe proxy server address to connect, if set, will override …\nThings to export\nThe timeout of invoking the database.\nCaptures the state of the repl, gathers commands and …\nClient for interacting with GreptimeDB\nReturns the argument unchanged.\nReturn the location of the history file (defaults to $HOME/…\nCalls <code>U::from(self)</code>.\nParse the next command\nCurrent prompt\nRustyline editor for interacting with user on command line\nRead Evaluate Print Loop (interactive command line) for …")