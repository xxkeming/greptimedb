searchState.loadedDescShard("mito2", 0, "Mito\nCache for the engine.\nConfigurations.\nMito developer document\nMito region engine.\nFlush related utilities and structs.\nmanifest storage\nMemtables are write buffers for regions.\nCommon structs and utilities for reading data.\nMito region.\nWorker requests.\nSorted strings tables.\nAbstraction to get current time.\nWrite ahead log of the engine.\nStructs and utilities for writing regions.\nA layer to access SST files under the same directory.\nPath provider for SST file and index file.\n<code>OperationType</code> represents the origin of the <code>SstWriteRequest</code>.\nPath provider that builds paths in region storage path.\nSST write results.\nContents to build a SST.\nPath provider that builds paths in local write cache.\nCreates index file path of given file id.\nCreates SST file path of given file id.\nClean the directory.\nDeletes a SST file (and its index file if it has one) with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigs for index\nIntermediate manager for inverted index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new AccessLayer for specific <code>region_dir</code>.\nReturns the object store of the layer.\nTarget object store.\nReturns the puffin manager factory.\nPuffin manager factory for index.\nReturns a reader builder for specific <code>file</code>.\nReturns the directory of the region.\nWrites a SST with specific <code>file_id</code> and <code>metadata</code> to the …\nManages cached data for the engine.\nBuilder to construct a CacheManager.\nCache strategies that may only enable a subset of caches.\nPath to column pages in the SST file.\nStrategy for compaction. Disables some caches during …\nCache key for a compressed page in a row group.\nDo not use any cache.\nStrategy for normal operations. Doesn’t disable any …\nMetrics type key for files on the local store.\nMetrics type key for pages.\nMaps (region, file, row group, column) to PageValue.\nCache key for pages of a SST row group.\nCached row group pages for a column.\nMetrics type key for selector result cache.\nMetrics type key for sst meta.\nMaps (file id, row group id, time series row selector) to …\nCache key for time series row selector result.\nCached result for time series row selector.\nMaps (region id, file id) to ParquetMetaData.\nCache key (region id, file id) for SST meta.\nCache key for all uncompressed pages in a row group.\nMetrics type key for vector.\nMaps Value to a vector that holds this value repeatedly.\nCalls CacheManager::bloom_filter_index_cache(). It returns …\nCache for bloom filter index.\nBuilds the CacheManager.\nReturns a builder to build the cache.\nCache size of different cache value.\nIndex of the column in the row group.\nCompressed page of the column in the row group.\nReturns memory used by the value (estimated).\nReturns memory used by the key (estimated).\nReturns memory used by the key (estimated).\nReturns memory used by the value (estimated).\nA cache for files.\nId of the SST file to cache.\nId of the SST file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls CacheManager::get_pages(). It returns None if the …\nGets pages for the row group.\nCalls CacheManager::get_parquet_meta_data().\nGets cached ParquetMetaData from in-memory cache first. If …\nCalls CacheManager::get_parquet_meta_data_from_mem_cache().\nGets cached ParquetMetaData from in-memory cache. This …\nCalls CacheManager::get_repeated_vector(). It returns None …\nGets a vector with repeated value for specific <code>key</code>.\nCalls CacheManager::get_selector_result(). It returns None …\nGets result of for the selector.\nCache for inverted index.\nSets page size for index content.\nSets cache size for index content.\nSets cache size for index metadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls [CacheManager::index_cache()]. It returns None if …\nCreates a new selector result value.\nCreates a key for a compressed page.\nCreates a new value from a compressed page.\nCreates a new value from all pages in a row group.\nCreates a key for all uncompressed pages in a row group.\nCache for SST pages.\nSets page cache size.\nProjection of rows.\nCalls CacheManager::puffin_metadata_cache(). It returns …\nPuffin metadata cache.\nSets cache size for puffin metadata.\nCalls CacheManager::put_pages(). It does nothing if the …\nPuts pages of the row group into the cache.\nCalls CacheManager::put_parquet_meta_data().\nPuts ParquetMetaData into the cache.\nCalls CacheManager::put_repeated_vector(). It does nothing …\nPuts a vector with repeated value into the cache.\nCalls CacheManager::put_selector_result(). It does nothing …\nPuts result of the selector into the cache.\nRegion id of the SST file to cache.\nCalls CacheManager::remove_parquet_meta_data().\nRemoves ParquetMetaData from the cache.\nBatches of rows selected by the selector.\nAll pages of the column in the row group.\nIndex of the row group.\nIndex of the row group.\nTime series row selector.\nCache for time series selectors.\nIncreases selector cache hit metrics.\nIncreases selector cache miss metrics.\nSets selector result cache size.\nCache for SST metadata.\nSets meta cache size.\nUpdates cache hit/miss metrics.\nCache for vectors.\nSets vector cache size.\nA write-through cache for remote object stores.\nCalls CacheManager::write_cache(). It returns None if the …\nGets the write cache.\nSets write cache.\nA Cache for writing files to object stores.\nReturns estimated size of ColumnDescriptor allocated from …\nReturns estimated size of FileMetaData allocated from heap.\nReturns estimated size of ParquetColumnIndex allocated …\nReturns estimated size of ParquetMetaData.\nReturns estimated size of ParquetOffsetIndex allocated …\nReturns estimated size of ColumnDescriptor allocated from …\nReturns estimated size of SchemaDescriptor allocated from …\nSubdirectory of cached files for write.\nA file cache manages files on local store and evict files …\nType of the file.\nKey of file cache index.\nAn entity that describes the file in the file cache.\nParquet file.\nPuffin file.\nConverts the file type to string.\nGenerates the path to the cached file.\nReturns the cache file path for the key.\nSize of the file in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the parquet metadata in file cache. If the file is not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local store of the file cache.\nLocal store to cache files.\nIndex to track cached files.\nCreates a new file cache.\nCreates a new index key.\nParses the file type from string.\nParse index key from the file name.\nPuts a file into the cache index.\nReads ranges from the cache.\nReads a file from the cache.\nRecovers the index from local store.\nRemoves a file from the cache explicitly.\nMetrics for index content.\nMetrics for index metadata.\nCache for index metadata and content.\nCalculates the total number of pages that a given size …\nConverts an offset to a page ID based on the page size.\nCalculates the byte range for data retrieval based on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a iterator of <code>IndexKey</code> for the pages that a …\nGets given range of index data from cache, and loads from …\nCache for index content.\nCache for index metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new inverted index cache.\nCreates a new bloom filter index cache.\nPrunes the size of the last page based on the indexes. We …\nWeighter for content.\nWeighter for metadata.\nCache for bloom filter index.\nBloom filter index blob reader with cache.\nCalculates weight for bloom filter index content.\nCalculates weight for bloom filter index metadata.\nReturns the argument unchanged.\nCache for index content.\nCache for index metadata\nCalls <code>U::from(self)</code>.\nReads the meta information of the bloom filter.\nCreates a new bloom filter index blob reader with cache.\nWeighter for content.\nWeighter for metadata.\nInverted index blob reader with cache.\nCache for inverted index.\nReturns the argument unchanged.\nCache for index content.\nCache for index metadata\nCalls <code>U::from(self)</code>.\nCalculates weight for inverted index content.\nCalculates weight for inverted index metadata.\nCreates a new inverted index blob reader with cache.\nWeighter for content.\nWeighter for metadata.\nRequest to write and upload a SST.\nA cache for uploading files to remote object stores.\nDestination path provider of which SST files in write …\nDownloads a file in <code>remote_path</code> from the remote object …\nReturns the file cache of the write cache.\nLocal file cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntermediate manager for index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the cache with a <code>local_store</code> to cache files and a …\nCreates a write cache based on local fs.\nPuffin manager factory for index.\nRemote object store to upload.\nRemoves a file from the cache by <code>index_key</code>.\nUploads a Parquet file or a Puffin file to the remote …\nWrites SST to the cache and then uploads it to the remote …\nRegion compaction request.\nCompaction scheduler tracks and manages compaction tasks.\nBuilders to create BoxedBatchReader for compaction.\nStatus of running and pending region compaction tasks.\nPending compaction request that is supposed to run after …\nSerializedCompactionOutput is a serialized version of …\nAccess layer of the region.\nBuilds BoxedBatchReader that reads all SST files and …\nWhether to remove deletion markers.\nFinds TTL of table by first examine table options then …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds all expired SSTs across levels.\nCompaction input files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax parallelism for pending compaction.\nMerge the waiter to the pending compaction.\nCreates a new CompactionStatus\nCreates a new compaction request for compaction picker.\nNotifies the scheduler that the compaction job is failed.\nNotifies the scheduler that the compaction job is finished …\nNotifies the scheduler that the region is closed.\nNotifies the scheduler that the region is dropped.\nNotifies the scheduler that the region is truncated.\nCompaction options. Currently, it can only be [StrictWindow…\nCompaction output file level.\nCompaction output time range. Only windowed compaction …\nPending compactions that are supposed to run as soon as …\nPlugins for the compaction scheduler.\nId of the region.\nCompacting regions.\nSender to send notification to the region worker.\nRequest sender of the worker that this scheduler belongs …\nThis file contains code to find sorted runs in a set if …\nSchedules a compaction for the region.\nSchedules a compaction request.\nSet pending compaction request or replace current value if …\nStart time of compaction task.\nConverts time range to predicates so that rows outside the …\nVersion control of the region.\nWaiters of pending requests.\nWaiters of the compaction request.\nPending waiters for compaction.\nA set of predefined time buckets.\nFits a given time span into time bucket by find the …\nReturns the argument unchanged.\nInfers the suitable time bucket duration. Now it simply …\nCalls <code>U::from(self)</code>.\nCompactionRegion represents a region that needs to be …\nRegion version for compaction that does not hold memtables.\nCompactor is the trait that defines the compaction logic.\nDefaultCompactor is the default implementation of …\n<code>[MergeOutput]</code> represents the output of merging SST files.\nOpenCompactionRegionRequest represents the request to open …\nExecute compaction for a region.\nInferred compaction time window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls the parallelism of this compaction task. Default …\nMerge SST files for a region.\nMetadata of the region.\nOpen a compaction region from a compaction request. It’s …\nOptions of the region.\nSSTs of the region.\nUpdate the manifest after merging SST files.\nPicker picks input SST files for compaction. Different …\nPickerOutput is the output of a <code>Picker</code>. It contains the …\nSerializedPickerOutput is a serialized version of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a SerializedPickerOutput to a PickerOutput.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new picker based on the compaction request …\nPicks input SST files for compaction.\nTrait for items to merge.\nTrait for any items with specific range.\nA set of files with non-overlapping time ranges.\nFinds sorted runs in given items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nItems to merge\nMerges current item with other item.\nReturns true if current item is merged from two items.\nCreates unmerged item from given value.\npenalty is defined as the total size of merged items.\nReturns the inclusive range of item.\nThe range of current merge item\nReduces the num of runs to given target and returns items …\nSize is used to calculate the cost of merging items.\nThe lower bound of all items.\nMaximum number of compaction tasks in parallel.\nCompactor to handle compaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent listener.\nHandles compaction failure, notifies all waiters.\nOutput of the picker.\nRequest sender to notify the worker.\nNotifies region worker to handle post-compaction tasks.\nStart time of compaction task\nSenders that are used to notify waiters waiting for …\n<code>TwcsPicker</code> picks files of which the max timestamp are in …\nAdds a new file to window and updates time range.\nWhether the target region is in append mode.\nAssigns files to windows with predefined window size (in …\nBuilds compaction output from files. For active writing …\nMerges consecutive files so that file num does not exceed …\nLimits the size of compaction output in a naive manner. …\nFinds the latest active writing window among all files. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax allowed files in active window.\nMax allowed sorted runs in active window.\nMax allowed files in inactive windows.\nMax allowed sorted runs in inactive windows.\nMax allowed compaction output file size.\nCreates a new Window with given file.\nReturns the time range of all files in current window …\nCompaction time window in seconds.\nCompaction picker that splits the time range of all …\nAssigns files to time windows. If file does not contain a …\nCalculates timestamp span between start and end timestamp.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe action is performed automatically based on internal …\nAutomatically determine the threshold based on internal …\nConfiguration options for the bloom filter.\nDefault channel size for parallel scan task.\nThe action is explicitly disabled.\nFetch option timeout\nConfiguration options for the full-text index.\nUse <code>1/INDEX_CREATE_MEM_THRESHOLD_FACTOR</code> of OS memory size …\nConfiguration options for the inverted index.\nUse <code>1/MEM_CACHE_SIZE_FACTOR</code> of OS memory size as mem cache …\nMemory threshold for performing certain actions.\nConfiguration for MitoEngine.\nOperational mode for certain actions.\nUse <code>1/PAGE_CACHE_SIZE_FACTOR</code> of OS memory size as page …\nUse <code>1/SST_META_CACHE_SIZE_FACTOR</code> of OS memory size as SST …\nFixed memory threshold.\nUnlimited memory.\nWhether to allow stale entries read during replay.\nWhether to apply the index on query: automatically or …\nWhether to apply the index on query: automatically or …\nWhether to apply the index on query: automatically or …\nWhether the action is automatic.\nInterval to auto flush a region if it has not flushed yet …\nAuxiliary directory path for the index in filesystem, used …\nBloom filter index configs.\nWhether to compress the index data.\nWhether to compress manifest and checkpoint file by gzip …\nPage size for inverted index content.\nCache size for inverted index content. Setting it to 0 to …\nWhether to create the index on compaction: automatically …\nWhether to create the index on compaction: automatically …\nWhether to create the index on compaction: automatically …\nWhether to create the index on flush: automatically or …\nWhether to create the index on flush: automatically or …\nWhether to create the index on flush: automatically or …\nWhether the action is disabled.\nDivide cpu num by a non-zero <code>divisor</code> and returns at least …\nWhether to enable the write cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFull-text index configs.\nGlobal write buffer size threshold to reject write …\nGlobal write buffer size threshold to trigger flush.\nIndex configs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverted index configs.\nNumber of meta action updated to trigger a new checkpoint …\nMax number of running background compaction jobs (default: …\nMax number of running background flush jobs (default: 1/2 …\nMax number of running background purge jobs (default: …\nMemory threshold for performing an external sort during …\nMemory threshold for creating the index.\nMemory threshold for creating the index.\nMemtable config\nCache size for metadata of puffin files. Setting it to 0 …\nMinimum time interval between two compactions. To align …\nNumber of region workers (default: 1/2 of cpu cores). Sets …\nCache size for pages of SST row groups. Setting it to 0 to …\nCapacity of the channel to send data from parallel scan …\nSanitize incorrect configurations.\nCache size for time series selector (e.g. <code>last_value()</code>). …\nCache size for SST metadata. Setting it to 0 to disable …\nBuffer size for SST writing.\nThe max capacity of the staging directory.\nCache size for vectors and arrow arrays. Setting it to 0 …\nRequest channel size of each worker (default 128).\nMax batch size for a worker to handle requests (default …\nWrite buffer size for creating the index.\nFile system path for write cache dir’s root, defaults to …\nCapacity for write cache.\nTTL for write cache.\nInner struct of MitoEngine.\nRegion engine implementation for timeseries data.\nConfig of the engine.\nEdit region’s metadata by RegionEdit directly. Use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet metadata of a region.\nRetrieve region’s metadata.\nReturns primary key encoding of the region.\nReturns the region disk/memory statistic.\nHandles RegionRequest and return its executed result.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the specific region exists.\nReturns true if the specific region exists.\nCheck whether the region edit is valid. Only adding files …\nReturns a new EngineInner with specific <code>config</code>, <code>log_store</code> …\nReturns a new MitoEngine with specific <code>config</code>, <code>log_store</code> …\nReturns requests(TopicGroupedRegionOpenRequests) grouped …\nHandles the scan <code>request</code> and returns a ScanRegion.\nScans a region.\nHandle substrait query and return a stream of record …\nReturns a scanner to scan for <code>request</code>.\nConverts the <code>RegionRole</code>.\nSets read-only for a region and ensures no more writes in …\nStop the inner engine.\nStop the engine.\nThe Wal raw entry reader.\nRegion workers group.\nSNAFU context selector for the <code>Error::ApplyBloomFilterIndex</code>…\nSNAFU context selector for the <code>Error::ApplyFulltextIndex</code> …\nSNAFU context selector for the <code>Error::ApplyInvertedIndex</code> …\nSNAFU context selector for the <code>Error::ArrowReader</code> variant\nSNAFU context selector for the <code>Error::BiErrors</code> variant\nSNAFU context selector for the <code>Error::BloomFilterFinish</code> …\nSNAFU context selector for the <code>Error::BuildEntry</code> variant\nSNAFU context selector for the <code>Error::BuildIndexApplier</code> …\nSNAFU context selector for the <code>Error::CastVector</code> variant\nSNAFU context selector for the <code>Error::ChecksumMismatch</code> …\nSNAFU context selector for the <code>Error::CleanDir</code> variant\nSNAFU context selector for the <code>Error::ColumnNotFound</code> …\nSNAFU context selector for the <code>Error::CompactRegion</code> variant\nSNAFU context selector for the <code>Error::CompatReader</code> variant\nSNAFU context selector for the <code>Error::CompressObject</code> …\nSNAFU context selector for the <code>Error::ComputeArrow</code> variant\nSNAFU context selector for the <code>Error::ComputeVector</code> variant\nSNAFU context selector for the <code>Error::ConvertColumnDataType</code>…\nSNAFU context selector for the <code>Error::ConvertMetaData</code> …\nSNAFU context selector for the <code>Error::ConvertValue</code> variant\nSNAFU context selector for the <code>Error::ConvertVector</code> variant\nSNAFU context selector for the <code>Error::CorruptedEntry</code> …\nSNAFU context selector for the <code>Error::CreateDefault</code> variant\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::CreateFulltextCreator</code>…\nSNAFU context selector for the <code>Error::DecodeArrowRowGroup</code> …\nSNAFU context selector for the <code>Error::DecodeStats</code> variant\nSNAFU context selector for the <code>Error::DecodeWal</code> variant\nSNAFU context selector for the <code>Error::DecompressObject</code> …\nSNAFU context selector for the <code>Error::DeleteIndex</code> variant\nSNAFU context selector for the <code>Error::DeleteSst</code> variant\nSNAFU context selector for the <code>Error::DeleteWal</code> variant\nSNAFU context selector for the <code>Error::DeserializeField</code> …\nSNAFU context selector for the <code>Error::Download</code> variant\nSNAFU context selector for the <code>Error::EmptyManifestDir</code> …\nSNAFU context selector for the <code>Error::EmptyRegionDir</code> …\nSNAFU context selector for the <code>Error::EncodeMemtable</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::EncodeWal</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FieldTypeMismatch</code> …\nAn error type to indicate that schema is changed and we …\nSNAFU context selector for the <code>Error::FillDefault</code> variant\nSNAFU context selector for the <code>Error::FilterRecordBatch</code> …\nSNAFU context selector for the <code>Error::FlushRegion</code> variant\nSNAFU context selector for the <code>Error::FlushableRegionState</code> …\nSNAFU context selector for the <code>Error::FulltextFinish</code> …\nSNAFU context selector for the <code>Error::FulltextPushText</code> …\nSNAFU context selector for the <code>Error::GetSchemaMetadata</code> …\nSNAFU context selector for the <code>Error::IndexEncodeNull</code> …\nSNAFU context selector for the <code>Error::IndexFinish</code> variant\nSNAFU context selector for the <code>Error::IndexOptions</code> variant\nSNAFU context selector for the <code>Error::InvalidBatch</code> variant\nSNAFU context selector for the <code>Error::InvalidConfig</code> variant\nSNAFU context selector for the <code>Error::InvalidMeta</code> variant\nSNAFU context selector for the <code>Error::InvalidMetadata</code> …\nSNAFU context selector for the <code>Error::InvalidParquet</code> …\nSNAFU context selector for the <code>Error::InvalidRecordBatch</code> …\nSNAFU context selector for the <code>Error::InvalidRegionOptions</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidRegionRequest</code> …\nSNAFU context selector for the <code>Error::InvalidRequest</code> …\nSNAFU context selector for the <code>Error::InvalidScanIndex</code> …\nSNAFU context selector for the <code>Error::InvalidSchedulerState</code>…\nSNAFU context selector for the <code>Error::InvalidSender</code> variant\nSNAFU context selector for the <code>Error::InvalidWalReadRequest</code>…\nSNAFU context selector for the <code>Error::Join</code> variant\nSNAFU context selector for the <code>Error::JsonOptions</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Metadata</code> variant\nSNAFU context selector for the <code>Error::NewRecordBatch</code> …\nSNAFU context selector for the <code>Error::NotSupportedField</code> …\nSNAFU context selector for the <code>Error::ObjectStoreNotFound</code> …\nContains the success value\nSNAFU context selector for the <code>Error::OpenDal</code> variant\nSNAFU context selector for the <code>Error::OpenRegion</code> variant\nSNAFU context selector for the <code>Error::OperateAbortedIndex</code> …\nSNAFU context selector for the <code>Error::ParseJobId</code> variant\nSNAFU context selector for the <code>Error::PartitionOutOfRange</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::PuffinAddBlob</code> variant\nSNAFU context selector for the <code>Error::PuffinBuildReader</code> …\nSNAFU context selector for the <code>Error::PuffinInitStager</code> …\nSNAFU context selector for the <code>Error::PuffinReadBlob</code> …\nSNAFU context selector for the <code>Error::PushBloomFilterValue</code> …\nSNAFU context selector for the <code>Error::PushIndexValue</code> …\nSNAFU context selector for the <code>Error::ReadDataPart</code> variant\nSNAFU context selector for the <code>Error::ReadParquet</code> variant\nSNAFU context selector for the <code>Error::ReadWal</code> variant\nSNAFU context selector for the <code>Error::Recv</code> variant\nSNAFU context selector for the <code>Error::RegionBusy</code> variant\nSNAFU context selector for the <code>Error::RegionClosed</code> variant\nSNAFU context selector for the <code>Error::RegionCorrupted</code> …\nSNAFU context selector for the <code>Error::RegionDropped</code> variant\nSNAFU context selector for the <code>Error::RegionLeaderState</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::RegionNotFound</code> …\nSNAFU context selector for the <code>Error::RegionStopped</code> variant\nSNAFU context selector for the <code>Error::RegionTruncated</code> …\nSNAFU context selector for the <code>Error::RejectWrite</code> variant\nSNAFU context selector for the <code>Error::RemoteCompaction</code> …\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SerializeField</code> …\nSNAFU context selector for the <code>Error::StaleLogEntry</code> variant\nSNAFU context selector for the <code>Error::StatsNotPresent</code> …\nSNAFU context selector for the <code>Error::StopScheduler</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Timeout</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::UnexpectedReplay</code> …\nSNAFU context selector for the <code>Error::UnsupportedOperation</code> …\nSNAFU context selector for the <code>Error::Upload</code> variant\nSNAFU context selector for the <code>Error::Utf8</code> variant\nSNAFU context selector for the <code>Error::WorkerStopped</code> variant\nSNAFU context selector for the <code>Error::WriteGroup</code> variant\nSNAFU context selector for the <code>Error::WriteParquet</code> variant\nSNAFU context selector for the <code>Error::WriteWal</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if we need to fill default value for a region.\nReturns true if the file is not found on the object store.\nFlush to alter table.\nFlush memtable during downgrading state.\nEngine reaches flush threshold.\nReason of a flush task.\nManages background flushes of a worker.\nFlush status of a region scheduled by the FlushScheduler.\nManual flush.\nOther reasons.\nFlush periodically.\nTask to flush a region.\nGlobal write buffer (memtable) manager.\nDefault WriteBufferManager implementation.\nAdd ddl request to pending queue.\nAdd write request to pending queue.\nGet flush reason as static str.\nRuns the flush task.\nFlushes memtables to level 0 SSTs and updates the manifest.\nThere is a flush task running.\nWe have freed <code>mem</code> bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the size limit for mutable memtables.\nWrite buffer size for the engine.\nReturns true if the region has pending DDLs.\nIndex options for the region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the flush task into a background job.\nReturns true if the region already requested flush.\nMemory that hasn’t been scheduled to free (e.g. used by …\nReturns the total memory used by memtables.\nMemory in used (e.g. used by mutable and immutable …\nMerge two flush tasks.\nMerges the task to pending task.\nMutable memtable memory size limit.\nReturns memory usage of mutable memtables.\nCreates a new flush scheduler.\nReturns a new manager with specific …\nOptional notifier. The manager can wake up the worker once …\nSend flush error to waiter.\nNotifies the scheduler that the flush job is failed.\nNotifies the scheduler that the flush job is finished.\nNotifies the scheduler that the region is closed.\nNotifies the scheduler that the region is dropped.\nNotifies the scheduler that the region is truncated.\nConsumes the task and notify the sender the job is success.\nPending ddl requests.\nTask waiting for next flush.\nRequests waiting to write after altering the region.\nPush the sender if it is not none.\nReason to flush.\nRegion to flush.\nCurrent region.\nTracks regions need to flush.\nRequest sender to notify the worker.\nReserves <code>mem</code> bytes.\nSchedules a flush <code>task</code> for specific <code>region</code>.\nTells the manager we are freeing <code>mem</code> bytes.\nSchedules a new flush task when the scheduler can submit …\nBackground job scheduler.\nNotify flush job status.\nFlush result senders.\nReturns whether to trigger the engine.\nReturns whether to stall write requests.\nVersion control of the region.\nAttaches a notifier to the manager.\nDefines RegionMetaAction related structs and …\nChange region’s metadata for request like ALTER\nEdit region’s state for changing options or file list.\nThe region manifest data.\nActions that can be applied to region manifest.\nLast data truncated in the region.\nRemove the region.\nTruncate the region.\nInferred compaction time window.\nCheck if the builder keeps a RegionMetadata.\nEncode self into json in the form of string lines.\nSST files.\nLast WAL entry id of flushed data.\nLast sequence of flushed data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last manifest version that this checkpoint …\nCurrent manifest version.\nThe metadata after changed.\nMetadata of the region.\nLast WAL entry id of truncated data.\nLast WAL entry id of truncated data.\nStart with a checkpoint.\n<code>Checkpointer</code> is responsible for doing checkpoint for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if it’s needed to do checkpoint for the region by …\nManage region’s manifest. Provide APIs to access …\nOptions for RegionManifestManager.\nInterval of version (ManifestVersion) between two …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if a newer version manifest file is found.\nIncreases last version and returns the increased version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetches the last RegionCheckpoint from storage.\nRetrieves the current RegionManifest.\nDirectory to store manifest.\nReturns total manifest size.\nConstructs a region’s manifest and persist it.\nOpens an existing manifest.\nStops the manager.\nUpdates the manifest. Returns the current manifest version …\nA checkpoint file (<code>.checkpoint</code>).\nA delta file (<code>.json</code>).\nDue to backward compatibility, it is possible that the user…\nKey to identify a manifest file.\nReturns the checkpoint file path under the <strong>current</strong> …\nDelete manifest files that version &lt; end. If …\nReturns the delta file path under the <strong>current</strong> compression …\nFetch all manifests in concurrent.\nReturn’s the file compress algorithm by file extension.\nReturn’s the file manifest version from path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all <code>R</code>s in the root directory that meet the <code>filter</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the last checkpoint path, because the last …\nLoad the latest checkpoint. Return manifest version and …\nReturns the CompressionType according to whether to …\nReturns the manifest dir\nReturns a iterator of manifests.\nStores the size of each manifest file.\nSave the delta manifest file.\nSave the checkpoint manifest file.\nScans the manifest files in the range of [start, end) and …\nSet the size of the checkpoint file by checkpoint version.\nSet the size of the delta file by delta version.\nSorts the manifest files.\nCompute the size(Byte) in manifest size map.\nThe latest version this checkpoint contains.\nMemtable memory allocation tracker.\nBuilder to build an iterator to read the range. The …\nIn memory write buffer.\nBuilder to build a new Memtable.\nProvider of memtable builders for regions.\nConfig for memtables.\nId for memtables.\nA range in the memtable.\nContext shared by ranges of the same memtable.\nRanges in a memtable.\nBuilds a new memtable instance.\nReturns the iterator to read the range.\nBuilds an iterator to read the range. Filters the result …\nIterator builder.\nMemtable implementation for bulk load\nReturns the estimated bytes allocated by this memtable.\nReturns bytes allocated.\nBytes allocated by the tracker.\nShared context.\nMarks we have finished allocating memory so we can free it …\nThe estimated bytes allocated by this memtable from heap.\nForks this (immutable) memtable and returns a new mutable …\nTurns a mutable memtable into an immutable memtable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the id of this memtable.\nReturns the id of the memtable to read.\nId of the memtable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether allocating is done.\nReturns true if the memtable is empty.\nScans the memtable. <code>projection</code> selects columns to read, …\nReturns the maximum sequence number in the memtable.\nThe maximum sequence number in the memtable.\nCreates a new MemtableRangeContext.\nReturns a new AllocTracker.\nCreates a new range from context.\nReturns the number of ranges in the memtable.\nTotal number of ranges in the memtable.\nReturns the num of total rows in memtable.\nTotal rows in memtable\nTracks <code>bytes</code> memory is allocated.\nMemtable implementation based on a partition tree.\nReturns the ranges in the memtable. The returned map …\nRange IDs and ranges.\nInternal metrics of the memtable.\nReturns the MemtableStats info of Memtable.\nStatistics of the memtable at the query time.\nPartitions memtables by time.\nReturns the time range of the memtable.\nThe inclusive time range that this memtable contains. It …\nMemtable version.\nWrites key values into the memtable.\nReturns the write buffer manager.\nWrites an encoded batch of into memtable.\nWrites one key value pair into the memtable.\nContext for iterating bulk memtable.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBulk part encoder/decoder.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrunes row groups by stats.\nConverts a <strong>sorted</strong> BinaryArray to DictionaryArray.\nEncodes mutations to a BulkPart, returns true if encoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax timestamp in part.\nMin timestamp in part.\nConverts mutations to record batches.\nTotal rows in part.\nPart file metadata.\nPart region schema.\nConverts arrays to record batch.\nConverts timestamp array to an iter of i64 values.\nIterator for reading data inside a bulk part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates current inner reader until exhausted.\nPrunes batch according to filters.\nCreates a new BulkPartIter.\nHelper for reading specific row group inside Memtable …\nShared structs for reading row group.\nBuffered batches to return.\nBuilds a reader to read the row group at <code>row_group_idx</code> …\nCreates a page reader to read column at <code>i</code>.\nContext of RowGroupReader so adapts to different …\nFetches column pages from memory file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal scan metrics.\nInner parquet reader.\nKey value view of a row.\nKey value view of a mutation.\nKey value view of a mutation.\nHelper to read rows in key, value order for sparse data.\nGet field columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nKey value read helper.\nKey value read helper.\nKey and value column indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if this container is empty\nReturns a key value iterator.\nReturns a key value iterator.\nReturn the max sequence in this container.\nMutation to read.\nMutation to read.\nCreates KeyValues from specific <code>mutation</code>.\nCreates crate::memtable::KeyValues from specific <code>mutation</code>.\nCreates a SparseReadRowHelper for specific <code>rows</code>.\nGet number of field columns.\nNumber of primary key columns.\nGet number of primary key columns.\nReturns number of rows.\nReturns number of rows.\nGet op type.\nReturns the partition key.\nReturns primary key encoding.\nPrimary key encoding hint.\nPrimary key encoding hint.\nGet primary key columns.\nGet sequence.\nGet timestamp.\nUse <code>1/DICTIONARY_SIZE_FACTOR</code> of OS memory as dictionary …\nConfig for the partition tree memtable.\nMemtable based on a partition tree.\nBuilder to build a PartitionTreeMemtable.\nId of a primary key inside a tree.\nIndex of a primary key in a shard.\nId of a shard, only unique inside a partition.\nData part of a shard.\nNumber of rows to freeze a data part.\nWhether to delete duplicates rows.\nKey dictionary of a shard.\nTotal bytes of dictionary to keep in fork.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMax keys in an index shard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge mode of the tree.\nReturns a new memtable.\nCreates a new builder with specific <code>write_buffer_manager</code>.\nTotal written rows in memtable. This also includes deleted …\nPartition of a partition tree.\nShard in a partition.\nBuilder of a shard.\nImplementation of the partition tree.\nUpdates stats of the memtable.\nCreates a mutable memtable from the tree.\nInitial capacity for the data buffer.\nData part batches returns by <code>DataParts::read</code>.\nRange of a data batch.\nBuffer for the value part (pk_index, ts, sequence, …\nFormat of immutable data part.\nData parts under a shard.\nReader for all parts inside a <code>DataParts</code>.\nParquet-encoded <code>DataPart</code>.\nThe active writing buffer.\nReturns current data batch of reader.\nReturns current data batch.\nSchema for data part (primary keys are replaced with …\nConverts <code>DataBuffer</code> to record batches, with rows sorted …\nEnd of current primary key inside record batch.\nBuilders for field columns.\nFreezes <code>DataBuffer</code> to bytes. If <code>pk_weights</code> is present, it …\nFreezes active buffer and creates a new active buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nimmutable (encoded) parts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the buffer is empty.\nReturns false if current reader is exhausted.\nAdvances reader to next data batch.\nReturns the number of rows in the active buffer.\nReturns num of rows in data buffer.\nBuilder for op_type column.\nPrimary key index of this batch.\nGets <code>pk_index</code> array from record batch.\nBuilder for primary key index.\nRange of current primary key inside record batch\nRecord batch of data.\nBuilds a lazily initialized data buffer reader from …\nReads frozen data part and yields DataBatches.\nReads data from all parts including active and frozen …\nSearches for next pk index, and it’s offset range in a …\nSearches next primary key along with it’s offset range …\nBuilder for sequence column.\nStart of current primary key inside record batch.\nBuilder for timestamp column.\nCreates a <code>DataBuffer</code> instance with given schema and …\nWrites a row to data buffer.\nWrites a row into parts.\nA reader that dedup sorted batches from a merger.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new dedup reader.\nA block in the key dictionary.\nReader to scan the KeyDictBuilder.\nBuffer to store unsorted primary keys.\nA key dictionary.\nBuilder to build a key dictionary.\nMaximum keys in a DictBlock.\nThe key is mcmp-encoded primary keys, while the values are …\nMax keys of the dictionary.\nReturns pk weights to sort a data part and replaces pk …\nDictionary blocks.\nUnsorted key blocks.\nFinishes the builder. The key of the second BTreeMap is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds the key to the builder and returns its index if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the buffer is empty.\nReturns true if the builder is full.\nBuffer for active dict block.\nGets the key by the pk index.\nGets the primary key by its index.\nBytes allocated by keys in the index.\nBytes of keys in the index.\nMaps pk index to position of the key in Self::dict_blocks.\nContainer of keys in the block.\nReturns number of items in the buffer.\nCreates a new builder that can hold up to <code>capacity</code> keys.\nNumber of keys in the builder.\nMaps primary key to pk index.\nReturns pk weights to sort a data part and replaces pk …\nReturns pk weights to sort a data part and replaces pk …\nPushes a new key and returns its pk index.\nReads the builder.\nReturns the shared memory size.\nNodes of merger’s heap.\nAdvances <code>len</code> rows from current batch. If current batch is …\nLength of current item.\nReturns current node to read. Only Self::current_rows rows …\nCurrent node to read.\nCurrent range of the batch in the source.\nReturns rows of current node to read.\nThe number of rows in current node that are valid to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeap to find node to read.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the other node is behind (exclusive) current node.\nReturns true if current node is not exhausted.\nReturns true if current merger is still valid.\nAdvances the merger to the next item.\nSearches first key of <code>other</code> in current item and returns …\nInner struct of the partition.\nA tree partition.\nKey of a partition.\nReader to scan rows in a partition.\nStructs to reuse across readers to avoid allocating for …\nConverts current data batch into a Batch.\nConverts a DataBatch to a Batch.\nWhether to dedup batches.\nForks the partition.\nFreezes the partition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet partition key from the key value.\nReturns true if the partition has data.\nReturns true if the region can be partitioned.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is a partition column.\nReturns true if the reader is valid.\nDoes filter contain predicate on primary key columns after …\nCreates a new partition.\nAdvances the reader.\nMap to index pk to pk id.\nBuffer to store pk weights.\nScans data in the partition.\nShard whose dictionary is active.\nShards with frozen dictionary.\nGets the stats of the partition.\nWrites to the partition without a primary key.\nWrites to the partition with a primary key.\nDense primary key filter.\nSparse primary key filter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSource that returns DataBatch.\nShard stores data related to the same key dictionary.\nA merger that merges batches from multiple shards.\nNode for the merger to get items.\nReader to read rows in a shard.\nReturns the data part.\nReturns the current primary key bytes or None if it doesn…\nReturns current pk id.\nNumber of rows to freeze a data part.\nData in the shard.\nForks a shard.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the shard is empty (No data).\nReturns whether current source is still valid.\nKey dictionary of the shard. <code>None</code> if the schema of the …\nReturns a new shard.\nAdvances source to next data batch.\nScans the shard.\nReturns the memory size of the shard part.\nWrites a key value into the shard.\nBuilder to write keys and data to a shard that the key …\nReader to scan a shard builder.\nReturns the current shard id of the builder.\nId of the current shard to build.\nBuffer to store data.\nNumber of rows to freeze a data part.\nBuilder for the key dictionary.\nBuilds a new shard and resets the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the builder is empty.\nReturns a new builder.\nScans the shard builder.\nReturns true if the builder need to freeze.\nWrite a key value with its encoded primary key.\nWrite a key value with given pk_index (caller must ensure …\nThe partition tree.\nConfig of the tree.\nEncodes the given key value into a sparse primary key.\nFetch next partition.\nForks an immutable tree. Returns a mutable tree that …\nMarks the tree as immutable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the tree is empty.\nWhether the tree has multiple partitions.\nMetadata of the region.\nCreates a new partition tree.\nFetches next batch.\nPartitions in the tree.\nScans the tree.\nPrimary key codec.\nOptional Sequence number of the current reader which limit …\nWrite key-values into the tree.\nReturns the write buffer manager.\nManager to report size of the tree.\nWrite one key value pair into the tree.\nMetrics of writing memtables.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSize allocated by keys.\nMaximum timestamp\nMinimum timestamp.\nUpdate the min/max timestamp range according to current …\nSize allocated by values.\nTime range of a partition.\nA partition holds rows with timestamps between <code>[min, max)</code>.\nPartitions.\nBuilder of memtables.\nReturns whether the <code>ts</code> belongs to the partition.\nReturns whether the <code>ts</code> belongs to the partition.\nForks latest partition and updates the partition duration …\nFreezes all memtables.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutable data of partitions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all memtables are empty.\nAppend memtables in partitions to <code>memtables</code>.\nAppend memtables in partitions to small vec.\nReturns all partitions.\nExclusive max timestamp of rows in the partition.\nReturns memory usage.\nMemtable of the partition.\nMetadata of the region.\nInclusive min timestamp of rows in the partition.\nReturns a new empty partition list with optional duration.\nCreates a new empty partition list from this list and a …\nReturns the next memtable id.\nNext memtable id.\nReturns the number of partitions.\nReturns the number of rows.\nReturns partition duration.\nDuration of a partition.\nComputes the start timestamp of the partition for <code>ts</code>.\nAll partitions.\nTime range of the partition. <code>None</code> means there is no time …\nWrite rows to the part.\nWrite key values to memtables.\nWrite to multiple partitions.\nVector builder capacity.\nInitial vector builder capacity.\nMetrics for reading the memtable.\nA <code>Series</code> holds a list of field values of some given …\nMemtable implementation that groups rows by their primary …\nBuilder to build TimeSeriesMemtable.\n<code>ValueBuilder</code> holds all the vector builders for field …\nValues holds an immutable vectors of field columns, …\nReturns a vector of all columns converted to arrow Array …\nFreezes active part to frozen part and compact frozen part …\nFreezes the active part and push it to <code>frozen</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a new Values instance from columns.\nReturns the series for given primary key, or create a new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates all series in SeriesSet.\nReturns the length of ValueBuilder\nCreates a new builder with specific <code>write_buffer_manager</code>.\nNumber of batch read.\nNumber of series pruned.\nTotal written rows in memtable. This also includes deleted …\nNumber of rows read.\nCreates an arrow SchemaRef that only contains primary keys …\nPushes a row of values into Series. Return the size of …\nPushes a new row to <code>ValueBuilder</code>. We don’t need primary …\nDuration to scan the memtable.\nConverts Values to <code>Batch</code>, sorts the batch according to …\nTotal series in the memtable.\nUpdates memtable stats.\nA version of current memtables in a region.\nReturns a new MemtableVersion which switches the old …\nReturns the argument unchanged.\nImmutable memtables.\nImmutable memtables.\nReturns the memory usage of the immutable memtables.\nCalls <code>U::from(self)</code>.\nReturns true if the memtable version is empty.\nLists mutable and immutable memtables.\nMutable memtable.\nReturns the memory usage of the mutable memtable.\nReturns a new MemtableVersion with specific mutable …\nReturns the number of rows in memtables.\nRemoves memtables by ids from immutable memtables.\nCache size in bytes.\nCache eviction counter, labeled with cache type and …\nCache hit counter.\nCache miss counter.\nTimer of whole compaction task.\nCounter of failed compaction task.\nCounter of all requested compaction task.\nTimer of different stages in compaction.\nFile type label.\nHistogram of flushed bytes.\nElapsed time of a flush job.\nCounter of scheduled failed flush jobs.\nReason to flush.\nCounter of scheduled flush requests. Note that the flush …\nElapsed time to handle requests.\nTimer of index application.\nGauge of index apply memory usage.\nCounter of created index bytes.\nTimer of index creation.\nGauge of index create memory usage.\nCounter of rows indexed.\nCounter of flush operations on intermediate files.\nCounter of read bytes on intermediate files.\nCounter of read operations on intermediate files.\nCounter of seek operations on intermediate files.\nCounter of write bytes on intermediate files.\nCounter of write operations on intermediate files.\nCounter of r/w bytes on index related IO operations.\nCounter of r/w operations on index related IO operations, …\nCounter of flush operations on puffin files.\nCounter of read bytes on puffin files.\nCounter of read operations on puffin files.\nCounter of seek operations on puffin files.\nCounter of write bytes on puffin files.\nCounter of write operations on puffin files.\nGauge for inflight compaction tasks.\nGauge for inflight compaction tasks.\nNumber of in-progress scan per partition.\nElapsed time of manifest operation. Labeled with “op”.\nGlobal memtable dictionary size in bytes.\nCounter of filtered rows during merge.\nPartition label.\nPartition tree memtable data buffer freeze metrics\nPartition tree memtable read path metrics\nCounter of filtered rows by precise filter.\nHistogram for the number of batches returned per query.\nHistogram for the number of rows returned per query.\nCounter of rows read from different source.\nCounter of row groups read.\nHistogram for the number of SSTs to scan per query.\nTimer of different stages in query.\nGauge for open regions in each worker.\nStage label.\nType label.\nUpload bytes counter.\nRegion worker id label.\nGlobal write buffer size in bytes.\nDownload bytes counter in the write cache.\nTimer of the downloading task in the write cache.\nCounter of rejected write requests.\nCounter of rows to write.\nElapsed time of each write stage.\nNumber of stalled write requests in each worker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage internal representation of a batch of rows for a …\nBuilder to build Batch.\nA struct to check the batch is monotonic.\nA column in a Batch.\nAsync batch reader.\nPointer to BatchReader.\nPointer to a stream that yields Batch.\nSource from a BoxedBatchIterator.\nSource from a PruneReader.\nSource from a BoxedBatchReader.\nMetrics for scanners.\nAsync Batch reader and iterator wrapper.\nSource from a BoxedBatchStream.\nLen of timestamp in arrow row format.\nBuilds the Batch.\nDuration to build file ranges.\nDuration to build the (merge) reader.\nChecks the batch is monotonic by timestamps.\nReturns true if the given batch is monotonic and behind …\nReturns Ok if the given batch is behind the current batch.\nId of the column.\nUtilities to adapt readers with different schema.\nTakes <code>batches</code> and concat them into one batch.\nHelper function to concat arrays from <code>iter</code>.\nDuration to convert batches.\nData of the column.\nUtilities to remove duplicate rows from a sorted batch.\nChecks batches from the part range are monotonic. …\nReturns fields in the batch.\nFields organized in columnar format.\nFilters rows by the given <code>sequence</code>. Only preserves rows …\nRemoves rows whose op type is delete.\nReturns the first sequence in the batch or <code>None</code> if the …\nReturns the first timestamp in the batch or <code>None</code> if the …\nFormats current batch and last batch for debug.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a sequence at given <code>index</code>.\nGets a timestamp at given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the number of rows in the batch is 0.\nUtilities to read the last row of each time series.\nReturns the last sequence in the batch or <code>None</code> if the …\nReturns the last timestamp in the batch or <code>None</code> if the …\nReturns the estimated memory size of the batch.\nMerge reader implementation.\nMerges metrics from another ScannerMetrics.\nCreates a new BatchBuilder with primary key.\nCreates a new batch.\nFetch next Batch.\nReturns next Batch from this data source.\nNumber of batches returned.\nNumber of file ranges scanned.\nNumber of mem ranges scanned.\nReturns the number of rows in the batch.\nNumber of rows returned.\nObserves metrics.\nReturns op types of the batch.\nOp types of rows\nTry to set an array as op types.\nReturns possibly decoded primary-key values.\nPossibly decoded <code>primary_key</code> values. Some places would …\nDuration to prepare the scan task.\nReturns primary key of the batch.\nPrimary key encoded in a comparable form.\nReturns ids and datatypes of fields in the Batch after …\nUtilities for projection.\nPush a field column.\nPush an array as a field.\nStructs for partition ranges.\nDuration to scan data.\nScans a region according to the scan request.\nUtilities for scanners.\nSequential scan.\nReturns sequences of the batch.\nSequences of rows\nTry to set an array as sequences.\nSets possibly decoded primary-key values.\nReplaces the primary key of the batch.\nSlice the batch, returning a new batch.\nSorts rows in the batch. If <code>dedup</code> is true, it also removes …\nTakes the batch in place.\nReturns timestamps of the batch.\nTimestamps of rows, should be sorted and not null.\nTry to set an array as timestamps.\nReturns timestamps in a native slice or <code>None</code> if the batch …\nDuration of the scan.\nUnordered scanner.\nAttaches the given end timestamp to the checker.\nSet all field columns.\nTries to set fields for the batch.\nCreates a new BatchBuilder with all required columns.\nAttaches the given start timestamp to the checker.\nDuration while waiting for <code>yield</code>.\nA helper struct to adapt schema of the batch to an …\nHelper to make fields compatible.\nHelper to make primary key compatible.\nReader to adapt schema of underlying reader to expected …\nDefault value for the column.\nIndex of the column in source batch.\nIndex in source batch or a default value to fill a column.\nAdapter to rewrite primary key.\nColumn Ids and DataTypes the reader actually returns.\nMake primary key of the <code>batch</code> compatible.\nMake primary key of the <code>batch</code> compatible.\nMake fields of the <code>batch</code> compatible.\nHelper to compat batches.\nAdapts the <code>batch</code> to the expected schema.\nOptional fields adapter.\nOptional primary key adapter.\nRow converter to append values to primary keys.\nOrder of the fields in the new primary key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if <code>left</code> and <code>right</code> have same columns and …\nIndices to convert actual fields to expect fields.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a CompatFields if needed.\nCreates a CompatPrimaryKey if needed.\nCreates a new compat reader.\nCreates a new CompatBatch.\nNew primary key codec.\nOriginal primary key codec.\nUnderlying reader.\nOptional primary key adapter.\nDefault values to append.\nId of the column.\nDefault value. The vector has only 1 element.\nState of the last row in a batch for dedup.\nMetrics for deduplication.\nA reader that dedup sorted batches from a source based on …\nStrategy to remove duplicate rows from sorted batches.\nBuffer to store fields in the last row to merge.\nDedup strategy that keeps the last non-null field for the …\nAn iterator that dedup rows by LastNonNull strategy. The …\nDedup strategy that keeps the row with latest sequence of …\nBuffered batch that fields in the last row may be updated.\nFields builders, lazy initialized.\nClears the builder.\nWhether the last row has delete op. If true, skips merging …\nWhether the last row (including <code>last_fields</code>) has null …\nThe current batch returned by the iterator. If it is None, …\nReturns the next deduplicated batch.\nFilter deleted rows.\nFilter deleted rows.\nRemoves deleted rows from the batch and updates metrics.\nFinds the index of the first row that has the same …\nFinishes the deduplication and resets the strategy.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the builder is initialized.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInner iterator that returns sorted batches.\nLast fields to merge, lazy initialized. Only initializes …\nFields that overlaps with the last row of the <code>buffer</code>.\nInitializes the builders with the last row of the batch.\nMerges last non-null fields, builds a new batch and resets …\nDedup metrics.\nCreates a new dedup reader.\nCreates a new strategy with the given <code>filter_deleted</code> flag.\nReturns a new builder with the given <code>filter_deleted</code> flag.\nCreates a new strategy with the given <code>filter_deleted</code> flag.\nCreates a new iterator with the given inner iterator.\nFetches the next batch from the inner iterator. It will …\nNumber of deleted rows.\nNumber of rows removed during deduplication.\nMeta of the last row in the previous batch that has the …\nPushes a batch to the dedup strategy. Returns the …\nPushes first row of a batch to the builder.\nReturns true if the builder don’t need to merge the rows.\nDedup strategy.\nThe last timestamp of the batch.\nCache hit, reads last rows from cached value.\nLast row reader that returns the cached last rows for row …\nReader to keep the last row for each time series. It …\nCommon struct that selects only the last row of each time …\nCache miss, reads from row group reader and update cache.\nCached last row reader for specific row group. If the last …\nFinishes the selector and returns the pending batch if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates row group’s last row cache if cache manager is …\nGets the underlying reader metrics if uncached.\nCreates a new <code>LastRowReader</code>.\nCreates new Hit variant and updates metrics.\nCreates new Miss variant and updates metrics.\nIterates cached last rows.\nReturns the last row of the next key.\nHandles next batch. Return the yielding batch if present.\nPush last row into <code>yielded_batches</code>.\nInner reader.\nThe last batch pending to return.\nIndex buffer to take a new batch from the last row.\nType to compare Batch by first row.\nReader to merge sorted batches.\nBuilder to build and initialize a MergeReader.\nMetrics for the merge reader.\nA <code>Node</code> represent an individual input data source to be …\nBuilds and initializes the reader, then resets the builder.\nCompares by primary key, time index, sequence desc.\nHolds <code>Node</code> whose key range of current batch <strong>isn’t</strong> …\nReturns current batch.\nCurrent batch to be read. The node ensures the batch is …\nReturns current batch and fetches next batch from the …\nFetches one batch from the hottest node.\nCost to fetch batches from sources.\nFetches non-duplicated rows from the hottest node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a builder from sources.\nHolds Nodes whose key range of current batch <strong>is</strong> overlapped …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the key range of current batch in <code>self</code> is …\nReturns whether the node still has batch to read.\nIf <code>filter_deleted</code> is set to true, removes deleted entries …\nLocal metrics.\nCreates and initializes a new MergeReader.\nInitialize a node.\nReturns an empty builder.\nNumber of times to fetch batches.\nNumber of times to fetch rows.\nNumber of input rows.\nNumber of output rows.\nBatch to output.\nReturns the primary key of current batch.\nPushes a batch iterator to sources.\nPushes a batch reader to sources.\nMoves nodes in <code>cold</code> heap, whose key range is overlapped …\nPush the node popped from <code>hot</code> back to a proper heap.\nTotal scan cost of the reader.\nSkips first <code>num_to_skip</code> rows from node’s current batch. …\nData source of this <code>Node</code>.\nInput sources.\nIndex of a vector in a Batch.\nIndex in fields.\nOnly cache vector when its length <code>&lt;=</code> this value.\nHandles projection and converts a projected Batch to a …\nIndex in primary keys.\nThe time index column.\nReturns a new mapper without projection.\nReturns ids of fields in Batches the mapper expects to …\nIds and DataTypes of field columns in the Batch.\nMaps column in RecordBatch to index in Batch.\nDecoder for primary key.\nReturns ids of projected columns that we need to read from …\nIds of columns to project. It keeps ids in the same order …\nConverts a Batch to a RecordBatch.\nReturns an empty RecordBatch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOutput record batch contains tags.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> If the original projection is empty.\nReturns the metadata that created the mapper.\nMetadata of the region.\nReturns a new mapper with projection. If <code>projection</code> is …\nReturns a vector with repeated values.\nReturns the schema of converted RecordBatch. This is the …\nSchema for converted RecordBatch.\nGets a vector with repeated values from specific cache or …\nAn iterator that prunes batches by time range.\nContext for file ranges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge metrics with the inner reader and return the merged …\nCreates a new <code>PruneTimeIterator</code> with the given iterator …\nPrunes batches by the pushed down predicate.\nPrune batch by time range.\nBuilder to create file ranges.\nBuilder to create mem ranges.\nList to manages the builders to create file ranges. Each …\nMeta data of a partition range. If the scanner is […\nIndex to access a row group.\nIndex and metadata for a memtable or file.\nBuilds file ranges to read the row group at <code>index</code>.\nBuilds mem ranges to read in the memtable. Negative …\nBuilds file ranges to read. Negative <code>row_group_index</code> …\nReturns true if we can split the range into multiple …\nContext for the file. None indicates nothing to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroups ranges by time range. It assumes each input range …\nIndex of the memtable and file.\nIndex to the memtable/file.\nIndices to memtables or files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the range if it can preserve the order.\nSplits the range into multiple smaller ranges. It assumes …\nMerges given <code>meta</code> to this meta. It assumes that the time …\nBuilds a mem range builder from row groups.\nCreates a new [ReaderBuilderList] with the given number of …\nBuilds a file range builder from context and row groups.\nCreates a PartitionRange with specific identifier. It …\nTotal number of row groups in this source. 0 if the …\nEstimated number of rows in the range. This can be 0 if …\nReturns true if the time range of given <code>meta</code> overlaps with …\nRanges of a memtable.\nRow group index in the file. Negative index indicates all …\nIndices to memtable/file row groups that this range scans.\nRow selections for each row group to read. It skips the …\nCreates a list of ranges from the <code>input</code> for seq scan. If …\nReturns the statistics of the memtable.\nThe time range of the range.\nCreates a list of ranges from the <code>input</code> for unordered scan.\nCommon input for different scanners.\nHelper to scans a region by ScanRequest.\nA scanner scans a region and returns a …\nSequential scan.\nContext shared by different streams from a scanner. It …\nUnordered scan.\nRegion SST access layer.\nAccess layer of the region.\nThe region is using append mode.\nUse the latest schema to build the bloom filter index …\nUse the latest schema to build the fulltext index applier.\nUse the latest schema to build the inverted index applier.\nBuilds memtable ranges to scan by <code>index</code>.\nBuild time range predicate from filters.\nCache.\nCache.\nScans sources in parallel.\nReturns true if the time range of a SST <code>file</code> matches the …\nHandles to SST files to scan.\nWhether to remove deletion markers.\nFormat the context for explain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to ignore bloom filter.\nIgnores file not found error.\nWhether to ignore fulltext index.\nWhether to ignore inverted index.\nInput memtables and files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex appliers.\nReturns true if the index refers to a memtable.\nMaps projected Batches to RecordBatches.\nRemove field filters if the merge mode is …\nMemtable range builders for memtables in the time range..\nMode to merge duplicate rows.\nCreates a new ScanInput.\nCreates a ScanRegion.\nReturns number of SST files to scan.\nReturns number of memtables to scan.\nCapacity of the channel to send data from parallel scan …\nCapacity of the channel to send data from parallel scan …\nRetrieves the partition ranges.\nPredicate to push down.\nPrunes a file to scan and returns the builder to build …\nStart time of the query.\nThe start time of the query.\nMetadata for partition ranges.\nReturns a [RegionScanner] to scan the region.\nScan request.\nReturns a SendableRecordBatchStream to retrieve scan …\nCreates a scan input.\nReturns a Scanner to scan the region.\nScan sequentially.\nCreates a new StreamContext for SeqScan.\nHint to select rows from time series.\nScans the input source in another task and sends batches …\nStart time of the scan task.\nTime range filter for time index.\nUnordered scan.\nCreates a new StreamContext for UnorderedScan.\nReturns true if the region can use unordered scan for …\nVersion of the region at scan.\nSets bloom filter applier.\nSets cache for this query.\nSets files to read.\nSets whether to remove deletion markers during scan.\nSets fulltext index applier.\nSets whether to ignore bloom filter.\nIgnores file not found error.\nSets whether to ignore fulltext index.\nSets whether to ignore inverted index.\nSets invereted index applier.\nSets memtable range builders.\nSets the merge mode.\nSets scan task channel size.\nSets parallel scan task channel size.\nSets predicate to push down.\nSets the time series row selector.\nSets start time of the query.\nSets time range filter for time index.\nMetrics while reading a partition.\nElapsed time before the first poll operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex of the partition to scan.\nQuery start time.\nScans file ranges at <code>index</code>.\nScans memtable ranges at <code>index</code>.\nLabel to distinguish different scan operation.\nScans a region and returns rows in a sorted sequence.\nBuilds a BoxedBatchReader from sequential scan for …\nBuilds a reader to read sources. If <code>semaphore</code> is provided, …\nBuilds sources for the partition range.\nBuilds a stream for the query.\nThe scanner is used for compaction.\nReturns the argument unchanged.\nReturns the scanner type.\nCalls <code>U::from(self)</code>.\nBuilds a merge reader that reads all ranges. Callers MUST …\nCreates a new SeqScan with the given input and compaction …\nProperties of the scanner.\nScans the given partition when the part list is set …\nContext of streams.\nScans a region without providing any output ordering …\nScans the region and returns a stream.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new UnorderedScan.\nProperties of the scanner.\nScans a [PartitionRange] by its <code>identifier</code> and returns a …\nContext of streams.\nThe region is altering.\nThe region is stepping down.\nThe region is dropping.\nThis is the approximate factor to estimate the size of wal.\nThe region is handling a region edit.\nContext to update the region manifest.\nManifest stats.\nMetadata and runtime status of a region.\nOpening regions\nRegions indexed by ids.\nRegion status include region id, memtable usage, sst …\nThe region is truncating.\nThe region is opened and is writable.\nSSTs accessor for this region.\nClear the map.\nSets the state of the region to given state if the current …\nEstimated WAL size in bytes. Use the memtables size to …\nSST file purger.\nGets flushable region by region id.\nGets flushable region by region id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets region by region id.\nGets region by region id.\nInserts a new region into the map.\nInserts a new region into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the region is downgrading.\nReturns whether the region is flushable.\nReturns whether the region is readonly.\nReturns true if the region exists.\nReturns true if the region exists.\nReturns whether the region is writable.\nReturn last compaction time in millis.\nLast compaction time in millis.\nReturns last flush timestamp in millis.\nLast flush time in millis.\nList all regions.\nContext to maintain manifest for this region.\nManager to maintain manifest for this region.\nMemtable builder for the region.\nReturns current metadata of the region.\nRegion opener.\nOptions for a region.\nReturns primary key encoding of the region.\nThe provider of log store.\nReturns the region dir.\nId of this region.\nReturns the region statistic.\nRemove region by id.\nRemove region by id.\nSets the altering state. You should call this method in …\nSets the dropping state. You should call this method in …\nSets the editing state. You should call this method in the …\nSets the region role state.\nSets the <code>RegionRole</code>.\nSets the region to readonly gracefully. This acquires the …\nSets the truncating state. You should call this method in …\nReturns the state of the region.\nThe state of the region. The region checks the state …\nmanifest stats\nStop background managers for this region.\nSwitches the region state to …\nProvider to get current time.\nUpdate compaction time to now millis.\nUpdate flush time to current time.\nUpdates the manifest if current state is <code>expect_state</code>.\nVersion control of mito engine.\nReturns current version of the region.\nVersion controller for this region.\nRegisters <code>sender</code> for an opening region; Otherwise, it …\nGets writable region by region id.\nGets writable region by region id.\nBuilder to create a new MitoRegion or open an existing one.\nBuilds the region metadata.\nSets the cache manager for the region.\nChecks whether the recovered region has the same schema as …\nWrites region manifest and creates a new region if it does …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new manifest options.\nTries to open the region and returns <code>None</code> if the region …\nSets metadata builder of the region to create.\nReturns a new opener.\nReturns the directory to the manifest files.\nReturns an object store corresponding to <code>name</code>. If <code>name</code> is …\nOpens an existing region in read only mode.\nSets options for the region.\nParses and sets options for the region.\nReplays the mutations from WAL and inserts mutations to …\nSets the <code>skip_wal_replay</code>.\nIf a WalEntryReader is set, the RegionOpener will use …\nOptions for compactions\nOptions for index.\nOptions for the inverted index.\nKeeps the last non-null field for each row.\nKeeps the last row.\nOptions for region level memtable.\nMode to handle duplicate rows while merging.\nPartition tree memtable options.\nOptions that affect the entire region.\nWe need to define a new struct without enum fields as …\nTime window compaction strategy.\nTime window compaction options.\nIf append mode is enabled, the region keeps duplicate rows.\nCompaction options.\nNumber of rows to freeze a data part.\nWhether to fall back to local compaction if remote …\nTotal bytes of dictionary to keep in fork.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe column ids that should be ignored when building the …\nMax keys in an index shard.\nIndex options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for the inverted index.\nMax num of files in the active window.\nMax num of sorted runs that can be kept in active writing …\nMax num of files in inactive time windows.\nMax num of sorted runs that can be kept in inactive time …\nCompaction time window defined when creating tables.\nMemtable options.\nReturns the <code>merge_mode</code> if it is set, otherwise returns the …\nThe mode to merge duplicate rows. Only takes effect when …\nReturns <code>true</code> if deduplication is needed.\nConverts the <code>options</code> map to a json object.\nReturns the <code>primary_key_encoding</code> if it is set, otherwise …\nReturns the primary key encoding mode.\nPrimary key encoding mode.\nWhether to use remote compaction.\nThe number of rows in a segment.\nCustom storage. Uses default storage if it is <code>None</code>.\nCompaction time window defined when creating tables.\nReturns time window in second resolution.\nRegion SST files TTL.\nRegion SST files TTL.\nValidates options.\nValidates whether the <code>options_map</code> has valid options for …\nWal options.\nStatic metadata of a region.\nVersion builder.\nControls metadata and sequence numbers for a region.\nData of VersionControl.\nAdd files to the builder.\nApplies region option changes and generates a new version.\nAlter schema of the region.\nApply edit to the builder.\nApply edit to current version.\nBuilds a new Version from the builder. It overwrites the …\nSequence number of last committed data.\nSets compaction time window.\nInferred compaction time window from flush.\nReturns current copy of data.\nSets flushed entry id.\nInclusive max WAL entry id of flushed data.\nSets flushed sequence.\nInclusive max sequence of flushed data.\nFreezes the mutable memtable if it is not empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new builder from an existing version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker of whether this region is dropped/dropping\nLast WAL entry Id.\nMark all opened files as deleted and set the delete marker …\nSets memtables.\nMutable and immutable memtables.\nSets metadata.\nMetadata of the region.\nReturns a new builder.\nReturns a new VersionControl with specific <code>version</code>.\nSets options.\nOptions of the region.\nRemove memtables from the builder.\nUpdates committed sequence and entry id.\nSSTs of the region.\nTruncate current version.\nSets truncated entty id.\nLatest entry id during the truncating table.\nLatest version.\nContext to keep region metadata and buffer write requests.\nNotifier to notify write result on drop.\nEncode and add WAL entry to the writer.\nRows to delete.\nError to send to the waiter.\nThe write operation is failed and we should not write to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new notify from the <code>sender</code>.\nReturns an empty context.\nNext entry id of WAL to write.\nNext sequence number to write.\nNotifiers to send write results to waiters.\nSend result to the waiter.\nNumber of rows to be written.\nWal options of the region being written to.\nPush mutation to the context.\nRows to put.\nId of region to write.\nSender to send write result to the waiter for this …\nSets error and marks all write operations are failed.\nUpdates next entry id.\nVersion of the region while creating the context.\nVersionControl of the region.\nValid WAL entry to write.\nConsumes mutations and writes them into mutable memtable.\nNotifications from internal background jobs.\nNotification from a background job.\nA failing compaction result.\nCompaction has failed.\nNotifies a compaction job has finished.\nCompaction has finished.\nDdl request to a region.\nDDL request to a region.\nUse RegionEdit to edit a region directly.\nNotifies a flush job is failed.\nFlush has failed.\nNotifies a flush job is finished.\nFlush has finished.\nCallback on failure.\nOptional output result sender.\nOneshot output result sender.\nRegion change result.\nNotifies the region the result of writing region change …\nRegion edit result.\nRequest to edit a region directly.\nNotifies the regin the result of editing region.\nSender and Ddl request.\nSender and write request.\nThe internal commands.\nNotify a worker to stop.\nTruncate result.\nNotifies the truncate result of a region.\nRequest sent to a worker\nWrite to a region.\nRequest to write a region.\nFlush timer.\nChecks whether we should allow a row doesn’t provide …\nChecks schema of rows is compatible with schema of the …\nReturns the default value for specific column.\nGets column index by name.\nRegion edit to apply.\nRegion edit to apply.\nRegion edit to apply.\nThe error source of the failure.\nThe error source of the failure.\nReturns estimated size of the request.\nFills default value for specific <code>columns</code>.\nTries to fill missing columns.\nEntry id of flushed data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether each column has null.\nWrite hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks the schema and fill missing columns.\nMemtables to remove.\nMap column name to column index in <code>rows</code>.\nCreates a new request.\nCreates a new output sender.\nCreates a sender.\nThe new region metadata to apply.\nCreates an empty sender.\nHandles <code>err</code> on failure.\nCompaction succeeded but failed to update manifest or …\nMarks the flush job as successful and observes the timer.\nType of the write request.\nReturns the encoding hint.\nRegion to write.\nRegion id of the request.\nRegion id.\nRegion id.\nRegion id.\nRegion id.\nRegion id.\nRegion metadata on the time of this request is created.\nDdl request.\nTruncate result.\nResult from the manifest manager.\nResult from the manifest manager.\nRows to write.\nSends the <code>result</code>.\nSends the <code>result</code> and consumes the sender.\nSends the <code>result</code> and consumes the inner sender.\nResult sender.\nResult sender.\nResult sender.\nResult sender.\nResult sender.\nFlush result senders.\nCompaction result senders.\nStart time of compaction task.\nTakes the inner sender.\nTruncated entry id.\nTruncated sequence.\nConverts request from a RegionRequest.\nThe sender to notify the result to the region engine.\nValidate proto value schema.\nSets the write hint.\nInternal notification.\nId of the region to send.\nId of the region to send.\nThe SettableRegionRoleState.\nThe sender of [SetReadonlyResponse].\nThe size of the column id in the encoded sparse row.\nA memory-comparable row <code>Value</code> encoder/decoder.\nRow value encoder/decoder.\nA codec for sparse key of metrics.\nSparse values representation.\nBuilds a primary key codec from region metadata.\nBuilds a primary key codec from region metadata.\nDecodes the primary key from the given bytes.\nDecode the leftmost value from bytes.\nEncodes rows to bytes.\nEncodes a key value to bytes.\nEncodes rows to specific vec.\nEncodes values to bytes.\nEncodes values to bytes.\nReturns the encoding type of the primary key.\nReturns the estimated size of the primary key.\nExtends the composite values with the given values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the primary key matches the filter.\nReturns the number of fields in the primary key.\nPrimary key fields.\nReturns a primary key filter factory.\nA memory-comparable row <code>Value</code> encoder/decoder.\nDecode primary key values from bytes.\nDecode primary key values from bytes without column id.\nDecode value at <code>pos</code> in <code>bytes</code>.\nReturns the field at <code>pos</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrimary key fields.\nSkip deserializing this field, returns the length of it.\nThe size of the column id in the encoded sparse row.\nThe column id of the table id.\nThe column id of the tsid.\nA codec for sparse key of metrics.\nSparse values representation.\nDecodes the given bytes into a <code>Value</code>.\nDecodes the given bytes into a <code>SparseValues</code>.\nDecode value at <code>offset</code> in <code>pk</code>.\nEncodes the given bytes into a <code>SparseValues</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of the given column, or <code>None</code> if the …\nReturns the field of the given column id.\nReturns the value of the given column, or <code>Value::Null</code> if …\nReturns the offset of the given column id in the given …\nInserts a new value into the <code>SparseValues</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SparsePrimaryKeyCodec</code> instance.\nCreates a new <code>SparseValues</code> instance.\nReturns a new <code>SparsePrimaryKeyCodec</code> instance.\nCompactionJob is a remote job that compacts a set of files …\nCompactionJobResult is the result of a compaction job.\nDefaultNotifier is a default implementation of Notifier …\nUnique id for a remote job.\nNotifier is used to notify the mito engine when a remote …\nRemoteJob is a job that can be executed remotely. For …\nRemoteJobResult is the result of a remote job.\nRemoteJobScheduler is a trait that defines the API to …\nSNAFU context selector for the <code>RemoteJobSchedulerError</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the mito engine that a remote job is completed.\nParses job id from string.\nThe sender to send WorkerRequest to the mito engine. This …\nSends a job to the scheduler and returns a UUID for the …\nSend the result of the compaction job to these waiters.\nRequest scheduler based on local state.\nThe state of scheduler\nScheduler defines a set of API to schedule Jobs\nToken used to halt the scheduler\nReturns the argument unchanged.\nTask handles\nCalls <code>U::from(self)</code>.\nStarts a new scheduler.\nSchedules a Job\nSends jobs to flume bounded channel\nState of scheduler\nStops scheduler. If <code>await_termination</code> is set to true, the …\nif await_termination is true, scheduler will wait all …\nDefault write buffer size, it should be greater than the …\nDefault number of concurrent write, it only works on …\nStructures to describe metadata of files.\nFields for internal columns.\nSST in parquet format.\nGets the arrow schema to store in parquet.\nSST version.\nBloom Filter index\nHandle to a SST file.\nInner data of FileHandle.\nUnique id for [SST File].\nMetadata of a SST file.\nTime range (min and max timestamps) of a SST file. Both …\nFull-text index.\nType of index.\nInverted index.\nType to store SST level.\nMaximum level of SSTs.\nSNAFU context selector for the <code>ParseIdError</code> error\nConverts FileId as byte slice.\nAppend <code>.parquet</code> to file id to make a complete file name\nAppend <code>.puffin</code> to file id to make a complete file name\nAvailable indexes of the file.\nReturns true if the file has a bloom filter index.\nReturns the size of the bloom filter index file\nReturns the file id.\nCompared to normal file names, FileId ignore the extension\nReturns the complete file path of the file.\nSize of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the file has a fulltext index\nReturns the size of the fulltext index file\nSize of the index file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the file has an inverted index\nReturns the size of the inverted index file\nSST level of the file.\nMark the file as deleted and will delete it on drop …\nReturns a reference to the FileMeta.\nNumber of row groups in the file.\nNumber of rows in the file.\nChecks if two inclusive timestamp ranges overlap with each …\nParses id from string.\nReturns a new unique FileId randomly.\nReturns the region id of the file.\nRegion of file.\nSequence in this file.\nReturns the time range of the file.\nTimestamp range of file. The timestamps have the same time …\nA worker to delete files in background.\nPurger that purges file for current region.\nRequest to remove a file.\nFile meta.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new purger.\nSend a purge request to the background worker.\nOutput of the bloom filter creation.\nOutput of the fulltext index creation.\nBase output of the index creation.\nOutput of the index creation.\nThe index creator that hides the error handling details.\nOutput of the inverted index creation.\nAborts the index creation.\nBloom filter output.\nBuilds indexer of given file id to [index_file_path].\nSanity check for arguments and create a new Indexer if …\nAvailable columns in the index.\nAvailable columns in the index.\nAvailable columns in the index.\nAvailable columns in the index.\nReturns false if the finish failed.\nReturns false if the update failed.\nReturns false if the update failed.\nReturns false if the update failed.\nSize of the file.\nFinalizes the index creation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFulltext index output.\nSize of the index.\nSize of the index.\nSize of the index.\nSize of the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverted index output.\nNumber of rows in the index.\nNumber of rows in the index.\nNumber of rows in the index.\nNumber of rows in the index.\nUpdates the index with the given batch.\n<code>BloomFilterIndexApplier</code> applies bloom filter predicates to …\nApplies bloom filter predicates to the provided SST file …\nCreates a blob reader from the cached or remote index file.\nCache for bloom filter index.\nCreates a blob reader from the cached index file\nFile cache to read the index file.\nBloom filter predicates.\nReturns the argument unchanged.\nIntersects two lists of ranges and returns the …\nCalls <code>U::from(self)</code>.\nCreates a new <code>BloomFilterIndexApplier</code>.\nObject store to read the index file.\nFactory to create puffin manager.\nCache for puffin metadata.\nDirectory of the region.\nID of the region.\nCreates a blob reader from the remote index file\nPredicate for matching values in a list.\n<code>InListPredicate</code> contains a list of acceptable values. A …\nEnumerates types of predicates for value filtering.\nBuilds the applier with given filter expressions\nCollects an equality expression (column = value)\nCollects an in list expression in the form of …\nHelper function to get the column id and type\nHelper function to encode a literal into bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of acceptable values.\nHelper function to get non-null literal value\nRecursively traverses expressions to collect bloom filter …\nThe indexer for the bloom filter index.\nThe buffer size for the pipe used to send index data to …\nAborts index creation and clean up garbage.\nWhether the indexing process has been aborted.\nCodec for decoding primary keys.\nReturns the column ids to be indexed.\nThe bloom filter creators.\nTODO(zhongzc): duplicate with …\nData flow of finishing index:\nFinishes index creation and cleans up garbage. Returns the …\nReturns the argument unchanged.\nThe global memory usage.\nCalls <code>U::from(self)</code>.\nReturns the memory usage of the indexer.\nCreates a new bloom filter indexer.\nThe statistics of the indexer.\nThe provider for intermediate files.\nUpdates index with a batch of rows. Garbage will be …\nEncodes index values according to their data types for …\nDecodes primary key values into their corresponding column …\nReturns the column ids of the index.\nTuples containing column id and its corresponding …\nDecodes a primary key into its corresponding column ids, …\nThe decoder for the primary key.\nSerializes a non-null <code>ValueRef</code> using the data type defined …\nReturns the fields of the index.\nThe data types of tag columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>IndexValuesCodec</code> from a list of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>FulltextIndexApplier</code> is responsible for applying fulltext …\nApplies the queries to the fulltext index of the specified …\nReturns the argument unchanged.\nReturns <code>None</code> if the index not found.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FulltextIndexApplier</code>.\nThe puffin manager factory.\nQueries to apply to the index.\nThe root directory of the region.\nStore responsible for accessing index files.\n<code>FulltextIndexApplierBuilder</code> is a builder for …\nBuilds <code>SstIndexApplier</code> from the given expressions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FulltextIndexApplierBuilder</code>.\n<code>AltFulltextCreator</code> is an alternative fulltext index …\n<code>FulltextIndexer</code> is responsible for creating fulltext …\n<code>SingleCreator</code> is a creator for a single column.\nAborts the index creation.\nWhether the index creation was aborted.\nColumn ID.\nReturns IDs of columns that the creator is responsible for.\nWhether the index should be compressed.\nCreators for each column.\nFinalizes the index creation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner creator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the memory usage of the index creator.\nCreates a new <code>FulltextIndexer</code>.\nStatistics of index creation.\nUpdates the index with the given batch.\n<code>IntermediateLocation</code> produces paths for intermediate files …\n<code>IntermediateManager</code> provides store to access to …\n<code>TempFileProvider</code> implements <code>ExternalTempFileProvider</code>. It …\nRemoves all intermediate files.\nReturns the directory to clean up when the sorting is done\nReturns the path of the directory for intermediate files …\nReturns the path of the intermediate file with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the intermediate directory path for building …\nReturns the intermediate file id from the path.\nCreate a new <code>IntermediateManager</code> with the given root path. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides the location of intermediate files.\nProvides store to access to intermediate files.\nCreates a new <code>TempFileProvider</code>.\nCreate a new <code>IntermediateLocation</code>. Set the root directory …\nReturns the store to access to intermediate files.\nSet the write buffer size for the store.\n<code>InvertedIndexApplier</code> is responsible for applying …\nApplies predicates to the provided SST file id and returns …\nCreates a blob reader from the cached index file.\nThe cache of index files.\nReturns the argument unchanged.\nPredefined index applier used to apply predicates to index …\nCalls <code>U::from(self)</code>.\nIn-memory cache for inverted index.\nCreates a new <code>InvertedIndexApplier</code>.\nThe puffin manager factory.\nPuffin metadata cache.\nThe root directory of the region.\nRegion ID.\nCreates a blob reader from the remote index file.\nStore responsible for accessing remote index files.\nSets the file cache.\nSets the index cache.\nSets the puffin metadata cache.\nConstructs an <code>InvertedIndexApplier</code> which applies …\nHelper function to add a predicate to the output.\nConsumes the builder to construct an <code>InvertedIndexApplier</code>, …\nCollects a <code>BETWEEN</code> expression in the form of …\nCollects a comparison expression in the form of …\nCollects an eq expression in the form of <code>column = lit</code>.\nRecursively collects eq list.\nCollects an in list expression in the form of …\nCollects eq list in the form of …\nCollects a regex match expression in the form of …\nHelper function to get the column id and the column type …\nHelper function to get the column name of a column …\nHelper function to encode a literal into bytes.\nFile cache, required argument for constructing …\nReturns the argument unchanged.\nColumn ids of the columns that are indexed.\nCalls <code>U::from(self)</code>.\nCache for inverted index.\nMetadata of the region, used to get metadata like column …\nCreates a new <code>InvertedIndexApplierBuilder</code>.\nHelper function to get a non-null literal.\nObject store, required argument for constructing …\nStores predicates during traversal on the Expr tree.\nThe puffin manager factory.\nCache for puffin metadata.\nDirectory of the region, required argument for …\nRecursively traverses expressions to collect predicates. …\nSets the file cache.\nSets the inverted index cache.\nSets the puffin metadata cache.\n<code>InvertedIndexer</code> creates inverted index for SST files.\nThe minimum memory usage threshold for one column.\nThe buffer size for the pipe used to send index data to …\nAborts index creation and clean up garbage.\nWhether the index creation is aborted.\nCodec for decoding primary keys.\nData flow of finishing index:\nFinishes index creation and cleans up garbage. Returns the …\nReturns the argument unchanged.\nThe index creator.\nIds of indexed columns.\nCalls <code>U::from(self)</code>.\nThe memory usage of the index creator.\nCreates a new <code>InvertedIndexer</code>. Should ensure that the …\nStatistics of index creation.\nThe provider of intermediate files.\nUpdates index with a batch of rows. Garbage will be …\nReusable buffer for encoding index values.\nA <code>PuffinFileAccessor</code> implementation that uses an object …\nA factory for creating <code>SstPuffinManager</code> instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PuffinManagerFactory</code> instance.\nThe stager used by the puffin manager.\nThe size of the write buffer used to create object store.\nStage of the index creation process.\nStatistics for index creation. Flush metrics when dropped.\n<code>TimerGuard</code> is a RAII struct that ensures elapsed time is …\nReturns byte count.\nNumber of bytes in the index.\nAccumulated elapsed time for the cleanup stage.\nAccumulated elapsed time for the index finish stage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncreases the byte count of the index creation statistics.\nIncreases the row count of the index creation statistics.\nIndex type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimerGuard</code>,\nStarts timing the cleanup stage, returning a <code>TimerGuard</code> to …\nStarts timing the finish stage, returning a <code>TimerGuard</code> to …\nStarts timing the update stage, returning a <code>TimerGuard</code> to …\nReturns row count.\nNumber of rows in the index.\nAccumulated elapsed time for the index update stage.\nA guard that increments a counter when dropped.\nA wrapper around <code>AsyncRead</code> that adds instrumentation for …\nA wrapper around <code>AsyncWrite</code> that adds instrumentation for …\nImplements <code>RangeReader</code> for <code>ObjectStore</code> and record metrics.\nA wrapper around <code>ObjectStore</code> that adds instrumentation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the counter by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxies to <code>ObjectStore::list</code>.\nCreate a new <code>CounterGuard</code>.\nCreate a new <code>InstrumentedStore</code>.\nCreate a new <code>InstrumentedAsyncRead</code>.\nCreate a new <code>InstrumentedAsyncWrite</code>.\nThe underlying object store.\nReturns an <code>InstrumentedRangeReader</code> for the given path. …\nReturns an <code>InstrumentedAsyncRead</code> for the given path. …\nProxies to <code>ObjectStore::remove_all</code>.\nSet the size of the write buffer.\nThe size of the write buffer.\nReturns an <code>InstrumentedAsyncWrite</code> for the given path. …\nReturns the path of the index file in the object store: …\nReturns the path of the SST file in the object store: …\nDefault batch size to read parquet files.\nDefault row group size for parquet files.\nKey of metadata in parquet SST.\nParquet SST info returned by the writer.\nParquet write options.\nSST file id.\nFile Meta Data\nStructs and functions for reading ranges from a parquet …\nFile size in bytes.\nFormat to store in parquet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex Meta Data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of row groups\nNumber of rows.\nParquet page reader.\nParquet reader.\nPorts private structs from parquet crate.\nRow group size.\nStatistics of parquet SSTs.\nTime range of the SST. The timestamps have the same time …\nBuffer size for async writer.\nParquet writer.\nA range of a parquet SST. Now it is a row group. We can …\nContext shared by ranges of the same parquet SST.\nCommon fields for a range to read and filter batches.\nBase of the context.\nDecoder for primary keys\nReturns the helper to compat batches.\nReturns the helper to compat batches.\nOptional helper to compat batches.\nShared context.\nReturns the file handle of the file range.\nReturns the path of the file to read.\nReturns filters pushed down.\nFilters pushed down.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new FileRangeContext.\nCreates a new FileRange.\nTRY THE BEST to perform pushed down predicate precisely on …\nTRY THE BEST to perform pushed down predicate precisely on …\nReturns the format helper.\nHelper to read the SST.\nReturns a reader to read the FileRange.\nReturns the reader builder.\nRow group reader builder for the file.\nIndex of the row group in the SST.\nRow selection for the row group. <code>None</code> means all rows.\nReturns true if FileRange selects all rows in row group.\nSets the <code>CompatBatch</code> to the context.\nNumber of columns that have fixed positions.\nArrow array type for the primary key dictionary.\nHelper for reading the SST format.\nHelper for writing the SST format.\nGets the arrow schema to store in parquet.\nGets the arrow schema of the SST file.\nSST file schema.\nSST file schema.\nReturns null counts of specific non-tag columns.\nReturns min/max values of specific non-tag columns.\nConvert <code>batch</code> to a arrow record batch to store in parquet.\nConvert a arrow record batch into <code>batches</code>.\nField column id to its index in <code>schema</code> (SST schema). In …\nField column id to their index in the projected schema ( …\nIndex of a field column by its column id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet fields from <code>record_batch</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns max values of specific column in row groups.\nGets the metadata of the SST.\nReturns min values of specific column in row groups.\nCreates a new helper.\nCreates a helper with existing <code>metadata</code> and <code>column_ids</code> to …\nCreates a new array for specific <code>primary_key</code>.\nReturns null counts of specific column in row groups.\nGets the min/max time index of the row group from the …\nCompute offsets of different primary keys in the array.\nIndex in SST of the primary key.\nGets sorted projection indices to read.\nIndices of columns to read from the SST. It contains all …\nReturns min/max values of specific tag.\nIndex in SST of the time index.\nSet override sequence.\nAsynchronously fetches byte ranges from an object store.\nParses column orders from Thrift definition. If no column …")